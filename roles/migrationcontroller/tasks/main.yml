---
- set_fact:
    api_groups: "{{ lookup('k8s', cluster_info='api_groups') }}"

- set_fact:
    restic_pv_host_path: /var/lib/origin/openshift.local.volumes/pods
  when: lookup('k8s', cluster_info='version').kubernetes.minor|replace('+', '')|int < 12

- block:
  - k8s:
      state: "present"
      definition: "{{ lookup('template', 'mig-cluster-config.yml.j2') }}"

  - name: "Get mig cluster configmap for hashing"
    set_fact:
      cluster_config_configmap:
        env: "{{ lookup('template', 'mig-cluster-config.yml.j2') | from_yaml }}"

  - k8s:
      state: "present"
      definition: "{{ lookup('template', 'monitoring-namespace-label.yml.j2') }}"

  - k8s:
      state: "present"
      definition: "{{ lookup('template', 'migration-controller.yml.j2') }}"

  - set_fact: velero_state="present"
    when: migration_velero

  - set_fact: log_reader_state="present"
    when: migration_log_reader

  - name: Get cluster config
    k8s_facts:
      api_version: v1
      kind: Namespace
      name: openshift-config
    register: config_namespace_check

  - set_fact:
      mig_ui_config_namespace: openshift-config
    when: config_namespace_check.resources|length > 0

  - when: migration_velero
    block:
    - name: Check if cloud-credentials secret exists already so we don't update it
      k8s_facts:
        api_version: v1
        kind: Secret
        name: "{{ velero_aws_secret_name }}"
        namespace: "{{ mig_namespace }}"
      register: secret_status

    - name: Check if gcp-cloud-credentials secret exists already so we don't update it
      k8s_facts:
        api_version: v1
        kind: Secret
        name: "{{ velero_gcp_secret_name }}"
        namespace: "{{ mig_namespace }}"
      register: gcp_secret_status

    - name: Check if azure-cloud-credentials secret exists already so we don't update it
      k8s_facts:
        api_version: v1
        kind: Secret
        name: "{{ velero_azure_secret_name }}"
        namespace: "{{ mig_namespace }}"
      register: azure_secret_status

    - name: "Create empty velero S3 secret"
      k8s:
        state: "{{ velero_state }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ velero_aws_secret_name }}"
            namespace: "{{ mig_namespace }}"
          data:
            cloud: ""
      when: (secret_status.resources|length) == 0

    - name: "Create empty velero gcp secret"
      k8s:
        state: "{{ velero_state }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ velero_gcp_secret_name }}"
            namespace: "{{ mig_namespace }}"
          data:
            cloud: ""
      when: (gcp_secret_status.resources|length) == 0

    - name: "Create empty velero azure secret"
      k8s:
        state: "{{ velero_state }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ velero_azure_secret_name }}"
            namespace: "{{ mig_namespace }}"
          data:
            cloud: ""
      when: (azure_secret_status.resources|length) == 0

    - name: "Set up velero supporting resources (CRDS, SA, SCC) when not managed by OLM"
      k8s:
        state: "{{ velero_state }}"
        definition: "{{ lookup('template', 'velero_supporting.yml.j2') }}"
    rescue:
    - name: "Set up velero supporting resources (CRDS, SA, SCC) when not managed by OLM"
      k8s:
        state: absent
        definition: "{{ lookup('template', 'velero_supporting.yml.j2') }}"

    - name: "Set up velero supporting resources (CRDS, SA, SCC) when not managed by OLM"
      k8s:
        state: "{{ velero_state }}"
        definition: "{{ lookup('template', 'velero_supporting.yml.j2') }}"

  - name: "Create proxy configuration secret if proxy is configured"
    k8s:
      state: "present"
      definition: "{{ lookup('template', 'proxy_secret.yml.j2') }}"
    when: http_proxy != "" or https_proxy != "" or no_proxy != ""

  - name: "Get proxy secret for hashing"
    set_fact:
      proxy_secret:
        env: "{{ lookup('template', 'restic-restore-action-config.yml.j2') | from_yaml }}"

  - name: "Set up velero restic-restore-action-config"
    k8s:
      state: "{{ velero_state }}"
      definition: "{{ lookup('template', 'restic-restore-action-config.yml.j2') }}"

  - name: "Get restic-restore-action-config for hashing"
    set_fact:
      restic_restore_action_config_configmap:
        env: "{{ lookup('template', 'restic-restore-action-config.yml.j2') | from_yaml }}"

  - name: "Set up velero controller"
    k8s:
      state: "{{ velero_state }}"
      definition: "{{ lookup('template', 'velero.yml.j2') }}"
      merge_type: merge

  - name: "Set up mig controller RBAC"
    k8s:
      state: present
      definition: "{{ lookup('template', 'mig_rbac.yml.j2') }}"

  # Create custom SCC for all clusters. For <3.11 scc.users fields will drive the
  # behavior, for others, RBAC will.
  - name: "Set up rsync-anyuid SCC"
    k8s:
      state: present
      definition: "{{ lookup('template', 'custom-rsync-anyuid.yml.j2') }}"
    when: "'security.openshift.io' in api_groups"

  - name: "Set up mig log reader"
    k8s:
      state: "{{ log_reader_state }}"
      definition: "{{ lookup('template', 'log_reader.yml.j2') }}"

  - when: not migration_velero
    block:
    - name: Find Velero ReplicaSets
      k8s_facts:
        kind: ReplicaSet
        namespace: "{{ mig_namespace }}"
        label_selectors:
        - component=velero
      register: velero_replicasets

    - name: Terminate Velero ReplicaSets
      k8s:
        name: "{{ item.metadata.name }}"
        state: absent
        kind: ReplicaSet
        namespace: "{{ mig_namespace }}"
      with_items: "{{ velero_replicasets.resources }}"

    - name: Find Restic Pods
      k8s_facts:
        kind: Pod
        namespace: "{{ mig_namespace }}"
        label_selectors:
        - name=restic
      register: restic_pods

    - name: Terminate Restic Pods
      k8s:
        name: "{{ item.metadata.name }}"
        state: absent
        kind: Pod
        namespace: "{{ mig_namespace }}"
      with_items: "{{ restic_pods.resources }}"
